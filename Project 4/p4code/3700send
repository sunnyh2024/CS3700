#!/usr/bin/python3
#
# CS3700, Fall 2021
# TCP Project Starter Code
#

import datetime
import json
import sys
import socket
import select
import time

from base64 import b64encode


MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0
ALPHA = 0.875
RTO = 550
RTTs = []
unacked = {}
LAST_PACKET_TIME = 0
PACKETS = {}

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

time.sleep(.5)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

# Helper so we can track RTTs
def get_time():
  return int(time.time() * 1000)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 3700send: " + string + "\n")

def send_next_packet():
  global SEQUENCE

  data = sys.stdin.buffer.read(DATA_SIZE)
  if (len(data) > 0):
    # print(str(b64encode(data)))
    msg = json.dumps({"sequence": SEQUENCE, "data": b64encode(data).decode(), "ack": False, "eof": False})
    if sock.sendto(msg.encode(), dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
      unacked[SEQUENCE] = (msg, get_time())
    SEQUENCE += len(data)
    return True
  else:
    return False

def get_packets():
  global PACKETS
  global SEQUENCE

  while True:
    data = sys.stdin.buffer.read(DATA_SIZE)
    # print(str(b64encode(data)))
    if len(data) > DATA_SIZE:
      msg = json.dumps({"sequence": SEQUENCE, "data": b64encode(data).decode(), "ack": False, "eof": False})
      PACKETS[SEQUENCE] = (msg, len(data))
      SEQUENCE += len(data)
    elif len(data) > 0:
      msg = json.dumps({"sequence": SEQUENCE, "data": b64encode(data).decode(), "ack": False, "eof": True})
      PACKETS[SEQUENCE] = (msg, len(data))
      SEQUENCE += len(data)
    else:
      break

def send_all_packets():
  global PACKETS

  for key in PACKETS:
    msg = PACKETS[key][0]
    data_len = PACKETS[key][1]
    if sock.sendto(msg.encode(), dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(data_len) + ")")

def ack_listener():
  global PACKETS
  global LAST_PACKET_TIME

  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)

  if result:
    LAST_PACKET_TIME = get_time()
    (data, addr) = result
    try:
        decoded = json.loads(data.decode())
        log("[recv pkt] " + str(decoded))

        # If there is an ack, send next packet
        if decoded['ack'] == 0 or decoded['ack']:
          log("[recv ack] " + str(decoded['ack']))
          if len(json.loads(PACKETS[decoded['ack']][0])['data']) == decoded['length']:
            #remove the entry for his ACK's sequence number in PACKETS
	          targetEntry = PACKETS.pop(decoded['ack'], None)

    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  elif (get_time() - LAST_PACKET_TIME > TIMEOUT * 1000):
    log("[error] timeout")
    sys.exit(-1)

# Create the packets to be sent
get_packets()

# Send the first packets
send_all_packets()

while PACKETS:
  ack_listener()
  send_all_packets()

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}).encode(), dest)
sys.exit(0)

# # Updates the RTO we will used based on the past RTTs
# def update_RTO(new_rtt):
#   global RTTs
#   global RTO
#   rtt_avg = sum(RTTs)/len(RTTs)
#   RTO = ALPHA * rtt_avg + (1 - ALPHA) * new_rtt
#   RTTs.append(new_rtt)


# # Now read in data, send packets
# while True:
#   log("ABOUT TO SLEEP")
#   result = sock.recvfrom(MSG_SIZE)

#   if result:
#     LAST_PACKET_TIME = get_time()
#     (data, addr) = result
#     try:
#       decoded = json.loads(data.decode())
#       log("[recv pkt] " + str(decoded))
#       log("[recv ack] " + str(decoded['ack']))

#       # If there is an ack, send next packet
#       if decoded['ack'] == SEQUENCE:
#         # Try to send next packet; break if no more data
#         if (not send_next_packet()):
#           break
#     except (ValueError, KeyError, TypeError):
#       log("[recv corrupt packet]")
#   elif (get_time() - LAST_PACKET_TIME > TIMEOUT * 1000):
#     log("[error] timeout")
#     sys.exit(-1)

