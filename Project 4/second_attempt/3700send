#!/usr/bin/python3
#
# CS3700, Fall 2021
# TCP Project Starter Code
#

import datetime
import json
import sys
import socket
import select
import time

from base64 import b64encode


MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0
ALPHA = 0.875
RTO = 550
WINDOW = 30
PACKETS = {}  # Stores all the packets we still have to send based on sequence number


# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

time.sleep(.5)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

# Helper so we can track RTTs


def get_time():
    return int(time.time() * 1000)

# Logs given string


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime(
        "%H:%M:%S.%f") + " 3700send: " + string + "\n")

# Initial function to create all the packets to be sent
def get_packets():
    global PACKETS
    global SEQUENCE

    while True:
        data = sys.stdin.buffer.read(DATA_SIZE)
        # print(str(b64encode(data)))
        if len(data) > 0:
            msg = {"sequence": SEQUENCE, "data": b64encode(
                data).decode(), "ack": False, "eof": False}
            PACKETS[SEQUENCE] = (msg, get_time(), len(data))
            SEQUENCE += len(data)
        else:
            msg = {"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}
            PACKETS[SEQUENCE] = (msg, get_time(), len(data))
            SEQUENCE += len(data)
            break

# Send all packets in PACKETS
def send_all_packets():
    global PACKETS

    for key in PACKETS:
        msg, send_time, data_len = PACKETS[key]
        if sock.sendto(json.dumps(msg).encode(), dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(key) + " (" + str(data_len) + ")")

def retransmit():
    global PACKETS
    global RTO

    for key in PACKETS:
        curr_time = get_time()
        msg, send_time, data_len = PACKETS[key]
        if curr_time - send_time > RTO:
            if sock.sendto(json.dumps(msg).encode(), dest) < len(msg):
                log("[error] unable to fully send packet")
            else:
                log("[send data] " + str(key) + " (" + str(data_len) + ")")
            if RTO < 5000:
                RTO *= 1.1
            else:
                RTO += 100

# Create the packets to be sent
get_packets()

# Send the first packets
send_all_packets()

while PACKETS:

    log("ABOUT TO SLEEP")
    result = sock.recvfrom(MSG_SIZE)

    if result:
        LAST_PACKET_TIME = get_time()
        (data, addr) = result
        try:
            decoded = json.loads(data.decode())
            log("[recv pkt] " + str(decoded))
            # If there is an ack, send next packet
            if decoded['ack'] == 0 or decoded['ack']:
                log("[recv ack] " + str(decoded['ack']))
                if decoded['ack'] in PACKETS and PACKETS[decoded['ack']][1] == decoded['length']:
                    # remove the entry for his ACK's sequence number in PACKETS
                    PACKETS.pop(decoded['ack'], None)
        except (ValueError, KeyError, TypeError):
            log("[recv corrupt packet]")
    elif (get_time() - LAST_PACKET_TIME) > (TIMEOUT * 1000):
        log("[error] timeout")
        sys.exit(-1)

    if not PACKETS:
        break
    retransmit()

sys.exit(0)
