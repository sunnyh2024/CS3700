#!/usr/bin/python3
#
# CS3700, Fall 2021
# TCP Project Starter Code
#

import datetime
import json
import sys
import socket
import select
import time

from base64 import b64encode


MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0
ALPHA = 0.875
RTO = 250
LAST_PACKET_TIME = 0
WINDOW = 30
SLIDING_WINDOW = 30
PACKETS = {}  # Stores all the packets we still have to send based on sequence number
OUT_COUNT = 0
SENT_LAST_PACKET = False
RTO_TOP = 1000 # Threshold where we change from exponential to linear change
RTO_LIN_INC = 50
RTO_EXP_INC = 1.05



# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

time.sleep(.5)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

# Helper so we can track RTTs
def get_time():
    return int(time.time() * 1000)

# Logs given string
def log(string):
    sys.stderr.write(datetime.datetime.now().strftime(
        "%H:%M:%S.%f") + " 3700send: " + string + "\n")

# Helper that changes the length of the RTO so that a packet will eventually get received even on high latency
def increaseRTO():
    global RTO
    log("RTO INCREASED")
    if RTO < RTO_TOP:
        RTO *= RTO_EXP_INC 
    else:
        RTO += RTO_LIN_INC

# Helper that gets the next packet to be sent (not including the EOF)
def send_next_packet():
    global PACKETS
    global SEQUENCE
    global OUT_COUNT
    global SENT_LAST_PACKET
    global RTO

    data = sys.stdin.buffer.read(DATA_SIZE)
    length = len(data)
    if length > 0:
        msg = {"sequence": SEQUENCE, "data": b64encode(
                data).decode(), "ack": False, "eof": False}
        if sock.sendto(json.dumps(msg).encode(), dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(SEQUENCE) + " (" + str(length) + ")")
            OUT_COUNT += 1
            PACKETS[SEQUENCE] = (msg, length, get_time() + 2 * RTO)
            SEQUENCE += length
        return True
    return False
        
# Initial function to create all the packets to be sent
def get_packets():
    global PACKETS
    global SEQUENCE

    while True:
        data = sys.stdin.buffer.read(DATA_SIZE)
        # print(str(b64encode(data)))
        if len(data) > 0:
            msg = {"sequence": SEQUENCE, "data": b64encode(
                data).decode(), "ack": False, "eof": False}
            PACKETS[SEQUENCE] = (msg, len(data))
            SEQUENCE += len(data)
        else:
            msg = {"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}
            PACKETS[SEQUENCE] = (msg, len(data))
            SEQUENCE += len(data)
            break

# Send all packets in PACKETS
def send_all_packets():
    global PACKETS

    for key in PACKETS:
        msg, data_len = PACKETS[key]
        if sock.sendto(json.dumps(msg).encode(), dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(key) + " (" + str(data_len) + ")")

# Checks the packets we have sent and retransmit the older ones
def transmit_timed_out():
    global PACKETS
    for key in PACKETS:
        if get_time() > PACKETS[key][2]:
            increaseRTO()
            msg = PACKETS[key][0]
            if sock.sendto(json.dumps(msg).encode(), dest) < len(msg):
                log("[error] unable to fully send packet")
            else:
                log("[send data] " + str(key) + " (" + str(PACKETS[key][1]) + ")")
                PACKETS[key] = (msg, PACKETS[key][1], get_time() + 2 * RTO)

# Send the first packet
send_next_packet()
LAST_PACKET_TIME = get_time()

while True:
    # Check that the socket has data in it
    readable, writeable, exceptional = select.select([sock], [], [], 0)
    if len(readable) > 0:
        try:
            result = sock.recvfrom(MSG_SIZE)
        except socket.timeout:
            result = None
        if result:
            LAST_PACKET_TIME = get_time()
            (data, addr) = result
            try:
                decoded = json.loads(data.decode())
                log("[recv pkt] " + str(decoded))
                # If there is an ack, send next packet
                if decoded['ack'] == 0 or decoded['ack']:
                    log("[recv ack] " + str(decoded['ack']))
                    if decoded['ack'] in PACKETS:
                        # remove the entry for his ACK's sequence number in PACKETS
                        PACKETS.pop(decoded['ack'], None)
                        OUT_COUNT -= 1
            except (ValueError, KeyError, TypeError):
                log("[recv corrupt packet]")

    # Reached timeout point
    elif (get_time() - LAST_PACKET_TIME) > (TIMEOUT * 1000):
        log("[error] timeout")
        sys.exit(-1)

    # Window is not full, send next pack
    if OUT_COUNT < SLIDING_WINDOW:
        if (not send_next_packet()) and (not PACKETS):
            break
    transmit_timed_out()

# Sending the EOF to the receiver (multiple times to avoid packet dropping problem)
finalMsgObj = {"sequence": SEQUENCE, "data": "", "ack": False, "eof": True}
for i in range(10):
    sock.sendto(json.dumps(finalMsgObj).encode(), dest)

sys.exit(0)



